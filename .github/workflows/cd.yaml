name: CD Pipeline - Deploy to vCluster on AKS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # 1Ô∏è‚É£ Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2Ô∏è‚É£ Connect to AKS
      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      # 3Ô∏è‚É£ Install vCluster CLI
      - name: Install vCluster
        run: |
          curl -L -o vcluster "https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64" && \
          sudo install -c -m 0755 vcluster /usr/local/bin && \
          vcluster --version

      - name: Handle vCluster
        run: |
          # Set up clean working directory to avoid conflicts
          WORKDIR=$(mktemp -d)
          cd $WORKDIR
          
          # Check for existing vCluster (with retries)
          MAX_RETRIES=3
          retry_count=0
          
          while [ $retry_count -lt $MAX_RETRIES ]; do
            if vcluster list -n vcluster-namespace 2>/dev/null | grep -q "my-vcluster.*Running"; then
              echo "‚úÖ vCluster 'my-vcluster' exists and is running"
              break
            else
              ((retry_count++))
              if [ $retry_count -eq $MAX_RETRIES ]; then
                echo "‚ÑπÔ∏è No running vCluster found - creating new one"
                vcluster create my-vcluster -n vcluster-namespace \
                  --connect=false \
                  --chart-path $WORKDIR \
                  --upgrade
                
                # Verify creation
                if ! vcluster list -n vcluster-namespace | grep -q "my-vcluster"; then
                  echo "‚ùå vCluster creation failed"
                  exit 1
                fi
              else
                echo "‚ö†Ô∏è vCluster not found (attempt $retry_count/$MAX_RETRIES), retrying..."
                sleep 5
              fi
            fi
          done

          # Connect to vCluster with validation
          echo "üîó Connecting to vCluster..."
          vcluster connect my-vcluster -n vcluster-namespace \
            --update-current=false \
            --server=https://localhost:8443 \
            > kubeconfig.yaml
          
          export KUBECONFIG=$PWD/kubeconfig.yaml
          
          # Verify connection
          if ! kubectl get ns >/dev/null 2>&1; then
            echo "‚ùå Failed to connect to vCluster"
            exit 1
          fi
          
          echo "::set-output name=kubeconfig::$PWD/kubeconfig.yaml"

      # 5Ô∏è‚É£ Install Helm & kubectl
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.7.1'

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      # 6Ô∏è‚É£ Connect to vCluster
      - name: Connect to vCluster
        run: |
          vcluster connect my-vcluster -n vcluster-namespace --update-current=false > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      # 7Ô∏è‚É£ Deploy Python App
      - name: Deploy Python App
        run: |
          helm upgrade --install python-app ./charts/python-app \
            --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/python-app \
            --set image.tag=latest \
            --namespace python-app \
            --create-namespace

      # 8Ô∏è‚É£ Verify Deployment
      - name: Verify Deployment
        run: |
          kubectl wait --for=condition=available deployment/python-app -n python-app --timeout=120s
          kubectl get pods -n python-app